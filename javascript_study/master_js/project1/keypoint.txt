[바인딩과 this]
바인딩 : 함수 혹은 메서드를 호출한 대상에 실제 함수를 연결해주는 것
var myObject={
	name: 'ayeon',
	sayName: function(){
		console.log(this.name);
	}
}

var yourObject = {
	name : 'ayeonee'
}
yourObject.sayName=myObject.sayName;

myObject.sayName();	//ayeon
yourObject.yourName();	//ayeonee

--> myObject.sayName(); 에서의 sayName은 myObject에 바인딩되었다.
--> yourObject.sayName(); 에서의 sayName은 yourObject에 바인딩되었다.

상황에 따라 지칭하는 대상이 다른 this.
-일반함수를 호출했을 때 this는 전역객체 가리킴. 
-객체 속 메서드에서 호출했을 때 this는 그 메서드를 호출한 객체에 바인딩됨. 
-생성자 함수에서의 this는 그 생성자함수로 생성된 객체에 바인딩됨.

[JavaScript로 HTML 다루기]
-getElementbyId
document.getElementById(idName);	idName에는 id값의 이름. idName찾아 HTML element반환.

-getElementsByTagName
document.getElementsByTagName(tagName);	tagName에는 태그 이름.

-createElement
document.createElement(태그이름);	HTML태그 생성. 

-appendChild
Node.appendChild()		HTML DOM 내에 새로운 Child Node 추가. 하위 계층에 해당하는 html 코드 생성.

-setAttribute
Element.setAttribute(속성이름, 속성값)		특정 HTML 요소에 대해 속성값 부여.

[js 문법]
for in : 객체의 속성들을 반복하여 작업을 수행. 객체의 key값에 접근 가능
indexOf= 문자열 속의 문자열 검색, 찾고자 하는 값 없으면 -1 반환

var div=document.getElementById('container');
div.innerHTML="수강관리 APP"; //html안에 해당 말이 넣어지는 효과
div.appendChild(table); //div 태그 하위에 다른 태그 만들고 싶을 때

var table=document.createElement('table');
table.setAttribute('id', 'classTable');	//테이블 안에 속성 추가
var tr=table.insertRow();		//테이블 안에 행을 추가해라. ()안에 -1 넣으면 테이블 태그의 마지막 행에 넣어라.

select 태그에서 <option value=""></option> 해서 제일 처음 뜨는 문구 공백 가능

splice((배열 변경할 인덱스), (제거할 요소의 수)) : 배열의 기존 요소를 삭제 또는 교체
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice

==와 ===의 차이
	== : 동등 연산자로, 피연산자가 서로 다른 타입이면 타입을 강제로 변환하여 비교. 
	=== : 일치 연산자로, 두 피연산자를 더 정확하게 비교. (데이터 타입까지 같아야 true)