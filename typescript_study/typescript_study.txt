[TYPESCRIPT]
-자바스크립트에 강한 타입 시스템을 적용, 대부분의 에러를 컴파일 환경에서 체크 가능.
-.ts 확장자를 가진 파일로 작성.
-VScode 에서 컴파일러 설치 : npm install -g typescript
-tsc (타입스크립트 파일 경로) : 해당 파일 컴파일.
-VScode에서 tsconfig.json 파일을 프로젝트 루트에 생성하면 구성 옵션 분석됨.
-타입스크립트를 로컬 환경에서 빠르게 테스트하고 싶다면 Parcel 번들러
	npm init
	npm install -D typescript parcel-bundler
-NodeJS에서 테스트하고 싶다면 TS Node
	npm init
	npm install -D typescript @types/node ts-node
	(실행)npx ts-node main.ts

[타입 기본]
-일반 변수, 매개변수(파라미터), 객체 속성(프로퍼티) 등에 :TYPE 같은 형태로 타입 지정.
-타입 에러가 발생하면 컴파일 하지 않아도 에러 발생
-타입 선언
	boolean
	number(모든 부동소수점 값)
	string(문자열, 따옴표말고도 es6의 템플릿 문자열도 지원) ex. let myColor:string=`My color is ${red}`;
	array(일반 배열) 
		ex. let fruits : string[]=['apple', 'banana','mango']	let num: number[]=[1,2,3];
		ex. let fruits : Array<string>=['apple', 'banana','mango']	let num: Array<number>=[1,2,3];
		ex. 다중 타입도 선언 가능 let array: (string | number)[]=['apple', 1, 2, 'banana',3]
		ex. 배열이 가지는 항목의 값을 단언할 수 없다면 any 사용. let someArr: any[]=[0,1,{},[],str];
		ex. 인터페이스나 커스텀 타입 사용 가능. 
		ex. 읽기 전용 배열을 생성 가능. (readonly, ReadonlyArray 타입 사용) let arrA: readonly number[] =[1,2,3,4]; (수정 불가능)
	Tuple(튜플) : 정해진 타입의 고정된 길이 배열을 표현. but 할당에 국한됨. (값을 넣는 행위는 막을수없음)
			let tuple:[string, number]; 
		단일 tuple 타입으로 지정해 사용가능
		2차원배열도 사용가능	
			let users:[number, string, boolean][];
			let users:Array<[number, string, boolean]>;
			users=[[1,'ay',true], [2, 'yj', false]];
		readonly 키워드로 읽기 전용 튜플 생성 가능.
	Enum(열거형) 
		숫자 혹은 문자열 값 집합에 이름(member)을 부여 가능. 
		값의 종류가 일정한 범위로 정해져 있는 경우 유용. 
		기본적으로 0부터 시작해 1씩 증가함. 
		수동으로 값 변경 가능하고 변경한 부분부터 다시 1씩 증가
		역방향 매핑 지원. (값으로 멤버에 접근 가능)
		문자열 값으로 초기화 가능. (역방향 매핑 지원x)
	any(모든 타입) : 일반적인 자바스크립트 변수와 동일하게 어떤 타입의 값도 할당할 수 있음. 
			타입을 단언할 수 없는 경우 유용.
			다양한 값을 포함하는 배열을 나타낼 때 사용 가능.
			const list: any[] = [1,true, 'anything!'];
			(any 사용 엄격하게 금지하려면 컴파일 옵션 "noImplicitAny" : true)
	Unknown(알 수 없는 타입) : 어떤 타입의 값도 할당할 수 있지만 unknown을 다른 타입에 할당 불가
	Object(객체) : typeof 연산자가 "object"로 반환하는 모든 타입 나타냄.