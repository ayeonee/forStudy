[TYPESCRIPT]
-자바스크립트에 강한 타입 시스템을 적용, 대부분의 에러를 컴파일 환경에서 체크 가능.
-.ts 확장자를 가진 파일로 작성.
-VScode 에서 컴파일러 설치 : npm install -g typescript
-tsc (타입스크립트 파일 경로) : 해당 파일 컴파일.
-VScode에서 tsconfig.json 파일을 프로젝트 루트에 생성하면 구성 옵션 분석됨.
-타입스크립트를 로컬 환경에서 빠르게 테스트하고 싶다면 Parcel 번들러
	npm init
	npm install -D typescript parcel-bundler
-NodeJS에서 테스트하고 싶다면 TS Node
	npm init
	npm install -D typescript @types/node ts-node
	(실행)npx ts-node main.ts

[타입 기본]
-일반 변수, 매개변수(파라미터), 객체 속성(프로퍼티) 등에 :TYPE 같은 형태로 타입 지정.
-타입 에러가 발생하면 컴파일 하지 않아도 에러 발생
-타입 선언
	boolean
	number(모든 부동소수점 값)
	string(문자열, 따옴표말고도 es6의 템플릿 문자열도 지원) ex. let myColor:string=`My color is ${red}`;
	array(일반 배열) 
		ex. let fruits : string[]=['apple', 'banana','mango']	let num: number[]=[1,2,3];
		ex. let fruits : Array<string>=['apple', 'banana','mango']	let num: Array<number>=[1,2,3];
		ex. 다중 타입도 선언 가능 let array: (string | number)[]=['apple', 1, 2, 'banana',3]
		ex. 배열이 가지는 항목의 값을 단언할 수 없다면 any 사용. let someArr: any[]=[0,1,{},[],str];
		ex. 인터페이스나 커스텀 타입 사용 가능. 
		ex. 읽기 전용 배열을 생성 가능. (readonly, ReadonlyArray 타입 사용) let arrA: readonly number[] =[1,2,3,4]; (수정 불가능)
		*인터페이스 : 클래스에서 구현부가 빠진 것, 객체가 어떤 프로퍼티 혹은 메소드를 가진다고 선언하는 것.
	Tuple(튜플) : 정해진 타입의 고정된 길이 배열을 표현. but 할당에 국한됨. (값을 넣는 행위는 막을수없음)
			let tuple:[string, number]; 
		단일 tuple 타입으로 지정해 사용가능
		2차원배열도 사용가능	
			let users:[number, string, boolean][];
			let users:Array<[number, string, boolean]>;
			users=[[1,'ay',true], [2, 'yj', false]];
		readonly 키워드로 읽기 전용 튜플 생성 가능.
	Enum(열거형) 
		숫자 혹은 문자열 값 집합에 이름(member)을 부여 가능. 
		값의 종류가 일정한 범위로 정해져 있는 경우 유용. 
		기본적으로 0부터 시작해 1씩 증가함. 
		수동으로 값 변경 가능하고 변경한 부분부터 다시 1씩 증가
		역방향 매핑 지원. (값으로 멤버에 접근 가능)
		문자열 값으로 초기화 가능. (역방향 매핑 지원x)
	any(모든 타입) : 일반적인 자바스크립트 변수와 동일하게 어떤 타입의 값도 할당할 수 있음. 
			타입을 단언할 수 없는 경우 유용.
			다양한 값을 포함하는 배열을 나타낼 때 사용 가능.
			const list: any[] = [1,true, 'anything!'];
			(any 사용 엄격하게 금지하려면 컴파일 옵션 "noImplicitAny" : true)
	Unknown(알 수 없는 타입) : 어떤 타입의 값도 할당할 수 있지만 unknown을 다른 타입에 할당 불가
	Object(객체) : typeof 연산자가 "object"로 반환하는 모든 타입 나타냄.
	void (값을 반환하지 않는 함수) : 실제로는 undefined를 반환함
	Never(절대 발생하지 않을 값) : 어떤 타입도 적용할 수 없음.
	Union(유니언) : 2개 이상의 타입을 허용하는 경우, | 로 타입 구분, ()는 선택사항
		let union : (string | number);
		union = 'Hello type!' ;
		union = 123;
		union = false; //error
	Intersection(인터섹션) : &를 사용해 2개 이상의 타입을 조합하는 경우, 새로운 타입을 생성하지 않고 기존의 타입들을 조합할 수 있어 유용, 자주 사용x 
		*유니언을 or로 이해한다면 인터섹션은 and로 이해함. 
	function(함수) : 화살표 함수를 이용해 타입 지정. 인수의 타입과 반환 값의 타입을 입력.
		let myFunc : (arg1 : number, arg2 : number) => number;
		myFunc = function(x,y){
			return x+y;
		};
-타입 추론(Inference) : 명시적으로 타입 선언이 되어있지 않은 경우 타입을 추론해 제공. 
	타입을 추론하는 경우 : 초기화된 변수, 기본값이 설정된 매개변수, 반환 값이 있는 함수
	이를 활용해 모든 곳에 타입을 명시할 필요는 없고 많은 경우 더 좋은 코드 가독성을 제공함.

-타입 단언(Assertions) : 타입스크립트가 타입 추론을 통해 판단할 수 있는 타입의 범주를 넘는 경우, 더 이상 추론하지 않도록 지시할 수 있음. 
	1. 변수 as 타입					ex.(val as number).toFixed(2);
	2. <타입>변수 : JSX에서 문제 발생가능해 .tsx에선 사용x	ex. (<number>val).toFixed(2); 
	
-Non-null 단언 연산자 : !를 사용하는 non-null 단언 연산자로 피연산자가 null이나 undefined 값이 아님을 단언할 수 있음. 변수나 속성에서 간단하게 사용할 수 있어 유용. 
-타입 가드(Guards) : NAME is TYPE 형태로 타입을 명시한 함수.	ex. val is number
	typeof, in, instanceof 연산자를 직접 사용할 수 있음.
	typeof : number, string, boolean, symbol만 타입 가드로 인식. (변수의 데이터 타입을 반환하는 연산자)
	in : 우변 객체는 any 타입어야함. 

-인터페이스(Interface) : 타입스크립트 여러 객체를 정의하는 일종의 규칙 또는 구조
	속성 ? - 사용하면 선택적 속성으로 정의 : 필수가 아닌 속성, 초기화해주지 않아도 됨.
		ex. isAdult? : boolean
	속성 readonly - 초기화된 값을 유지해야하는 읽기 전용 속성 정의, 모든 속성이 readonly일경우 유틸리티나 단언 타입 활용 가능.

-인터페이스 함수타입 : 호출 시그니처(Call signature) 사용
	호출 시그니처  : 함수의 매개 변수(parameter)와 반환 타입 지정
	interface IName{
		(PARAMETER : PARAM_TYPE) : RETURN TYPE		//call signature
	}
-인터페이스 클래스타입 : implements 키워드 사용
	class User implements IUSer{ }
	정의한 클래스를 인수로 사용하는 경우 호출 가능한 구조가 아니기에 오류 발생 
	-> 구성 시그니처(construct signature)로 해결
	interface IName{
		new (PARAMETER : PARAM_TYPE) : RETURN_TYPE
	}

-인덱싱 가능 타입(Indexable types) : 수많은 속성을 가지거나 단언할 수 없는 임의의 속성이 포함되는 구조에서 유용하게 사용됨.
	arr[2]와 같이 숫자로 인덱싱하거나 obj['name']과 같이 문자로 인덱싱함.
	인덱싱에 사용할 인덱서(Indexer)의 이름과 타입, 인덱싱 결과의 반환 값을 지정. 
	인덱서의 타입은 string과 number만 지정. 
	interface INAME { 
		[INDEXER_NAME : INDEXER_TYPE] : RETURN_TYPE
	}
	ex. interface IItem{
		[itemIndex : number] : string | boolean | number[]
	}
	let item : IItem = [ 'Hello', false, [1,2,3]];

	keyof : 속성 이름을 타입으로 사용할 수 있음. 인덱싱 가능 타입의 속성 이름들이 유니온 타입으로 적용.

-인터페이스 확장 : extends 키워드 활용해 상속 가능, 같은 이름의 인터페이스를 여러개 만들 수 있음. (내용추가하는 경우에 유용)

-제네릭(Generic) : 재사용을 목적으로 함수나 클래스의 선언 시점이 아닌 사용 시점에 타입을 선언.
	함수 이름 우측에 <T>를 작성해 시작. 
	