*모듈 : 노드로 개발한 애플리케이션을 이루는 기본 단위, 관련 코드들을 모아서 캡슐화해놓은 것
	모듈 단위로 구성된다 = 객체 지향 컨셉으로 애플리케이션이 구성
 -전역 객체 : 어디서나 사용할 수 있는 객체
 -모듈의 종류 
  기본 모듈 & 확장 모듈 : 기본은 노드를 설치하면 기본으로 설치되는 모듈, 확장은 노드의 기능을 확장시킴(express처럼 하나의 프레임워크로서 제공되기도 하고 다른 기술을 손쉽게 끌어와 사용할 수 있게 도와줌)
  일반 모듈 & 네이티브 모듈 : 개발방법에 따라 나눌 수 있음. C/C++로 노드의 모듈을 개발한 경우 네이티브 모듈, 일반 모듈은 자바스크립트로 개발된 모듈. 같은 기능을 수행한다면 네이티브 모듈이 더나은 성능
  글로벌 모듈 & 로컬 모듈 : 어디서든 사용할 수 있도록 설치한 확장 모듈을 글로벌 모듈, 해당 애플리케이션에서만 사용하기 위해 설치한 확장 모듈이나 개발자가 개발한 모듈을 로컬 모듈.
  복합 모듈 : 내부 모듈이나 데이터 파일, 템플릿, 테스트 코드 등을 포함하는 모듈
  require() : 앞으로 모듈을 불러올 때 사용, 모듈 식별자인 module.exports를 이용해 모듈이 제공하는 함수나 객체를 반환. 불러온 모듈이 다른 모듈이 잇어야 한다면 그 모듈도 같이 로드함. 

*전역 객체 ; Global
 -console : 콘솔화면과 관련된 기능. log와 time 자주 씀. console.log(), console.time(label) : 시간 측정 시작, console.timeEnd(label) : 시간 측정 종료
 -process : 프로그램과 관련된 기능을 다루는 객체. 
	process.argv: 프로그램의 매개변수 정보
	process.env : 컴퓨터 환경과 관련된 정보
	process.version : Node.js의 버전
	process.versions : Node.js 프로세스에서 사용하는 모듈들의 버전
	process.arch : 프로세서의 아키텍처
	process.platform : 플랫폼의 정보
	process.exit() : 프로그램 종료
	process.memoryUsage() : 메모리 사용 정보
	process.uptime() : 현재 프로그램이 실행된 시간
 -exports : 모듈 관련 객체, exports 사용하여 기능 확장 가능. 

*Utility 모듈 : node.js의 보조적인 기능 중 유용한 기능만을 모아놓은 모듈.
*file system  모듈 : 파일 처리와 관련된 작업을 하는 모듈. sync라는 이름이 붙어있는 메소드가 동기방식 사용. 동기적 읽기 방식 사용하면 파일을 읽으면서 다른 작업 동시에 할수 없음. 비동기적으로 읽으면 파일을 읽으면서 다른 작업도 동시에 수행 가능, 파일을 다 읽으면 매개변수 callback으로 전달된 함수가 호출됨.
*event 모듈 : 노드의 객체가 이벤트 발생시킬 때 이러한 객체들은 events.EventEmitter라는 인스턴스 이용. 
	node.js에서는 이벤트 모듈과 EventEmitter클래스가 내장되어 있는데, 이를 사용하여 이벤트와 에빈트 핸들러를 연동시킬 수 있음. 이벤트를 활용하는 객체에는 해당 이벤트가 발생할 때 대응하여 동작하는 콜백 함수를 가지는데 이러한 함수를 이벤트 리스너라고 부르기도 함. 이벤트 모듈을 사용하려면 require() 메소드를 이용하여 로드하고, 그 객체를 통해 EventEmitter 클래스를 로드하여 사용하는 것이 일반적

*노드에서의 상속 : 자바스크립트와 동일하게 상속할 수 있지만 더 편리하게 상속할수 있도록 util모듈 통해 별도의 메소드 지원.(util.inherits())

*확장모듈 (https://www.npmjs.com/ npm registry 사이트)
 설치 npm install [모듈명] -g
 확인 npm list -g
 여러개 설치 npm install [모듈1], [모듈2], [모듈3]
 특정 버전의 확장모듈 설치 npm install [모듈명@버전]
 업데이트 npm update [모듈명] or npm update [모듈명] -g
 모든 모듈 업데이트 npm update
 모듈 삭제 npm uninstall [모듈명] or npm uninstall [모듈명] -g
 
*package.json : 배포한 모듈 정보를 담고자 만들었지만, 노드로 작성하는 애플리케이션도 관리 가능.
 직접 작성도 가능하지만 npm init 으로 자동 생성 가능. 해당 애플리케이션을 위해 사용한 확장 모듈에 대한 정보는 npm install -save 를 통해 자동으로 모듈 정보 추가 가능.
 pacakge.json 파일 내용과 설명 : https://edu.goorm.io/learn/lecture/557/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-node-js/lesson/174371/package-json

*nodemon : 노드가 실행하는 파일이 속한 디렉터리를 감시하고 있다가 파일이 수정되면 자동으로 노드 애플리케이션으 재시작하는 확장 모듈. 
 설치 : npm install nodemon -g (노드 애플리케이션 개발할 때마다 사용할 예정)
 사용법 : nodemon app.js

*express 설치
	npm install -g express-generator
	express [디렉토리 명]
	(에러 뜨면 window shell 에서 권한 수정)
	npm start 하면 서버 시작
	http://localhost:3000/ 로 접속
	ctrl c로 종료 가능

express 설치 후 생성된 파일 중에 실행에 가장 큰 영향 미치는 것(app.js와 www)
*app.js 내부 구성 
 1~8번 : 모듈 불러옴. 5번 morgan은 http 리퀘스트에 대해 로깅, 객체를 생성. 10번 app 객체 선언하고 express() 함수로 생성. 이 객체로 웹 서버의 특징을 기술.
 13번 : 화면을 보이게 할 뷰 템플릿 파일들이 있는 경로를 라우팅하기 위해 그 값을 미리 정의. 화면의 출력을 담당하는 뷰계층을 구성하는 파일들을 연결. (views 폴더로 지정) 앞으로 뷰 템플릿 파일을 만들고 난 후 views 폴더 안에 넣어주고 라우팅 설정해주면 됨. (*라우팅 : 클라이언트로부터 요청받은 URL과 뷰를 매칭시키는 것)
 14번 : 뷰에 사용될 기본 엔진의 이름을 정의. 
 20번 : 디렉토리 구조를 URL에 반영하여 쉽게 접근 가능한 정적 디렉토리를 설정함.
 31~40번 : 에러 발생했을 때 어떻게 처리할지에 대한 코드 
*www.js 
 http에 관한 설정. (웹 서버와 관련된 부분이 들어있음) npm start도 이 www 파일을 실행시킴. 
 var port = normalizePort(process.env.PORT || '3000'); 포트 값 설정.

*페이지 라우팅 : 특정한 URL에 대해 특정한 뷰로 연결하는 역할. 실제로 라우팅에 사용되는 정보는 호스트 이름을 제외하고 나머지 경로를 표시한 문자. (ex. http://localhost:3000/hello 면 라우팅 대상은 '/hello'
	app.get('/', function(req, res){
		res.render('index.jade');
	});
	app.get 함수는 GET방식으로 들어오는 경로를 연결, 이에 대응하는 동작을 콜백함수로 기술할 수 있도록 함. 지정된 Path인 '/' 은 웹 사이트의 루트 페이지로 연결.
	req=요청 객체, 클라이언트에서 보낸 여러 정보가 포함. 
	res=응답 객체, 우리가 클라이언트에 응답할 수 있게 하는 객체. render()로 뷰를 렌더링함.
	jade : 템플릿 엔진 모듈.
	app.post 함수는 POST 방식으로 들어오는 경로를 연결. 
	app.post('/post', function(req, res){
		res.render('write.jade', {
			id : req.body.id,
			name : req.body.name
		});
	})
	id, name이라는 HTML Form의 item으로 넘어온 값을 전달하여 출력. 
	app.get('/hello/:id', function(req,res){
		var id = req.params.id;
		~~
	}); 이고 http://localhost:3000/hello/world 로 요청받았다면 req.params.id에는 'world'라는 문자열이 들어감.
	
*템플릿 엔진 : 동적파일과 정적 파일의 장단점을 결합한 형태의 새로운 체계. ejs, pug
	ejs : html태그에 부분적으로 입력 및 수정
	pug : 코드를 간소화 시켜서 컴파일한 후 html 렌더링(원래 이름 jade)

*pug 문법 : 닫기 태그 쓰지 않고 들여쓰기로 계층 구조 표현. (들여쓰기 단위가 반드시 통일되어야 함, 잘못된 계층일 경우 500 에러가 발생)
	html
		head
		body
	
	태그 이름 뒤에 # 붙이고 ID를 적어줌으로써 해당 HTML 요소에 고유한 이름 부여 가능.
	원래는 <div id="id"> 면 pug 에서는 div#id
	원래는 <div class="class">면 pug에서는 div.class
	pug에서 div 생략해도 div로 인식하여 동작. 괄호로 나머지 속성들 기술.
		ex. #contents(style="border:1px solid black;")
		ex. input(type="checkbox", checked) 여러 속성 동시 부여시 반점 이용.

	태그 내부 텍스트 표현법 : 태그 관한 서술 띄어쓰기 후에 표현하고자 하는 텍스트 작성. 텍스트가 길다면 | 로 다음줄에 이어서 표현 가능.
	동적 콘텐츠 표현 : JSON 형태로 주고 받음. express가 Pug 엔진에 {"title":"goorm", "message" : "Welcome to GoormEdu"} 라는 JSON 데이터를 보냈다고 하면 Pug에서 적절한 위치에 #{fieldname}으로 기술. ex. div#subject #{title}
	JSON 데이터에 값이 HTML 태그 포함되어 있다면 html 태그가 적용되지 않고 그대로 출력됨. 		HTML 코드로 동작하려면 !{fieldName}으로 출력.
	<script>, <style> 태그 한해서 세로선(|)을 사용하지 않고도 여러 줄로 구성된 코드 기술 지원.
	//- 쓰면 Pug에선 주석으로 표현하고 실제 출력시에는 주석 생략됨.
	
*클라이언트/서버 통신 방식
-Polling : 클라이언트가 서버에 주기적으로 요청 후 응답을 받는 방식. 구현이 간단하지만 많은 트래픽이 낭비됨. 실시간성이 보장X, 실시간 메시지 전달이 크게 중요하지 않은 서비스에 적합한 방식.
-Long Poll : 유효한 이벤트가 발생하면 응답을 해주는 방식. Polling에 비해 불필요한 요청과 응답을 줄임.
-WebSocket : HTML5 표준 기술, 클라이언트와 서버가 연결된 후부터 요청/응답과는 상관없이 서버와 양방향 통신 가능.  동적인 양방향 연결 채널 구성. Websocket API로 서버로 메시지 보내고 요청 없이 응답 받는 것 가능. 80번 포트 사용중->웹 서버도 기능을 지원하고 있어야 함. 

*Socket.io : 오래된 버전의 웹 브라우저는 웹소켓 지원하지 않기 때문에 이를 해결 위해 Socket.io 등장. 브라우저가 웹소켓을 지원하면 웹 소켓 방식으로 동작, 지원하지 않는 브라우저라면 일반 http 이용하여 실시간 통신 흉내냄. node.js 기반으로 만들어진 기술로 거의 모든 웹 브라우저와 모바일 장치를 지원하는 실시간 웹 애플리케이션 지원 라이브러리. 즉 자바스크립트를 이용하여 브라우저 종류에 상관없이 실시간 웹을 구현할 수 있도록 한 기술. npm install socket.io 로 설치.

//connection : socket.io의 기본이벤트(사용자가 웹사이트를 열면 자동으로 발생)
io.on('connection', function(socket){
    socket.emit('news', { serverData : "서버 작동" }); //event 발생 함수, socket.emit은 해당 socket을 통해 상대편으로 전달, io.emit은 서버가 현재 접속해있는 모든 클라이언트에게 이벤트 전달.
    socket.on('client login', function(data){   //이벤트 작성 socket.on(이벤트 이름, 함수or변수)
        console.log(data);
    });
    socket.on('disconnect', function(){ //사용자 접속이 끊어지면 자동 발생.
        console.log('접속이 종료되었습니다.');
    });
});

**socket io 에서 is not function 에러 뜰 때
	const io = require('socket.io')(app);	로 수정.

*project 생성 시
	npm install express-generator -g
	express [프로젝트 디렉터리명]
	cd [프로젝트 디렉터리명] && npm install
 그 후 socket.io, pug 설치 (npm install socket.io  /  npm install pug)
 이미 socket.io글로벌로 설치되어 있다면 npm link socket.io로 위치 잡아줌.
 데이터 저장 위한 mongoose 설치 npm install mongoose
*서버 작동 시에
	www로 분리되어 있다면 npm start
	server.js 코드 하나에 서버 코드를 모두 작성하면 node server로 서버 구동.

**부트스트랩 실행시 Uncaught TypeError:Cannot read property 'fn' of undefined 에러 발생하면
	스크립트 파일 불러오는 순서가 잘못 되었기 때문임. 부트스트랩 스크립트는 제이쿼리 스크립트가 먼저 로드되어 있어야만 실행. 

**CORS 속성 : 서로 다른 도메인 출처(css, image, js 등)에 접근 가능 및 실행 권한.
	anonymous : CORS 요청 시 자격 증명 플래그를 설정하지 않음.
	use-credentials : 자격증명을 요청함. 
	ex. <script src="https://google.co.kr/aa.js" crossorigin="anonymous"></script>

*mongoose : mongoDB를 node.js에서 사용하게 해줌, mongoDB의 ODM
	**ODM : Object Document Mapping, 문서를 DB에서 조회할 때 자바스크립트 객체로 바꿔주는 역할. 

*NoSQL : 관계형 데이터 모델을 사용하지 않고 SQL을 사용하지 않는 모든 데이터베이스 시스템 또는 데이터스토어, 무한에 가까운 확장성을 제공하기에 단순한 키와 값의 쌍으로 이루어져 있음.

*mongoDB에서는 데이터가 Document로 불리며 이 데이터의 집합을 Collection이라고 함. 스키마 제약 없이 자유롭고 BSON(Binary JSON)형태로 각 문서가 저장되기에 JOIN이 필요없이 한 문서에서 좀 더 이해하기 쉬운 형태 그대로 정보를 저장할 수 있음. 문서지향 데이터베이스여서 객체 지향 프로그래밍과 잘 맞고 JSON 사용시 아주 유용.
	<SQL과의 비교>
	MySQL		mongoDB

	database		database
	table		collection
	index		index
	row		JSON document
	column		JSON field
	join		embedding and linking
	primary key	_id field
	group by		aggregation
	
*mongoose 모듈 : NoSQL 데이터베이스를 지원하는 노드의 확장 모듈. 데이터를 만들고 관리하기 위하여 스키마를 만들고, 그 스키마로 모델을 만듦. 스키마와 모델을 만드는 것을 통하여 data를 불러온 후에 그 데이터를 객체화시켜 빠르게 수정함으로써 데이터에 접근할 수 있기 헤줌. 분명하게 모델링된 문서(Document)들이 모여있는 Collection을 관리하는 것이 수월해짐.

*mongoose 주요 메소드
	[데이터베이스 연결]
		var mongoose = require('mongoose');
		mongoose.connect('mongodb://localhost/goormdb')
		
	데이터베이스에 연결하는 connect()메소드 제공.
	데이터베이스가 연결되면 connection 인스턴스가 생성(mongoose.connection)되며 연결되는 순간에는 open이벤트 발생. goormdb 데이터베이스가 없다면 mongoDB는 이를 자동으로 생성. 
	단, 여러개의 데이터베이스를 사용하고자 하면 mongooose.connect()를 사용할 수 없음. 
	--> 이 땐 mongooose.createConnection() 메소드를 사용. 
		mongoose.connect('mongodb://localhost/goormdb',{useNewUrlParser});

		var mongoose=require('mongoose');
		var connection1=mongoose.createConnection('mongodb://localhost/mydb1');
		var connection2=mongoose.createConnection('mongodb://localhost/mydb2');

	[모델 정의하기] (mongoDB에서의 데이터를 저장하는 기본 단위인 도큐먼트의 형태 의미)
	var Schema = mongoose.Schema, ObjectId=Schema.ObjectId;
	var ArticleSchema=new Schema({
		author : ObjectId,
		title : String,
		body : String,
		date : Date
	});
	사용하려면
	var ArticleModel = mongoose.model('Article', ArticleScheme);
	
	[모델 사용하기] (모델 인스턴스 또 한번 생성)
	var instance=new ArticleModel();
	instance.title='hello';
	instance.save(function(err){
		//save 실행 후 콜백함수의 내용
	});
	instance.find({}, function(err,docs){
		//find 실행 후 콜백함수의 내용
	});

	[검색하기]
	도큐먼트, 즉 우리가 원하는 데이터는 find(), findOne(), findById() 메소드를 통해 검색 가능.
	이런 메소드들은 Model 인스턴스에서 실행됨. 
	Model.find(query, fields, options, callback)
	Model.find({'some.value':5}, function(err, docs){
	});		//some.value=5인 Document 검색. docs는 배열로서 검색된 모든 도큐먼트담음.
	Model.findOne() 메소드는 오직 하나의 도큐먼트만이 두 번째 인자로 넘긴 콜백함수의 doc인자로 전달. 
	Model.findById() 메소드는 findOne()메소드와 마찬가지로 단 하나의 도큐먼트만 반환하지만, _id키 값을 이용하여 검색. 

	[도큐먼트 추가]
	모델을 생성하면서 title과 body 필드 값을 먼저 채우고 article.date와 같이 객체의 멤버에 접근하는 방식을 통해 날짜 값 부여. 최종적으로 컬렉션에 저장하려면 article.save() 메소드 호출
	var article = new ArticleMoel({title : "Title", body: "Content"});
	article.date=new Date();
	article.save(function(err){
		if(err){
		return handleError(err);
		}
	});

	[도큐먼트 삭제]
	remove() 메소드 호출 통해 삭제 가능, 더 세분화된 deleteOne, deleteMany가 추가됨. 
	deleteOne : 매칭되는 첫 번째 도큐먼트만 삭제.
	deleteMany : 매칭되는 모든 도큐먼트 삭제. 

*Atlas : mongoDB 제공해주는 클라우드 서비스
mongodb+srv://ayeon:<password>@mongo-test.avv2v.mongodb.net/<dbname>?retryWrites=true&w=majority

**jQuery 선택지와 함수
$("table").css("border","1px solid #000");
--> 선택자에 의해 선택된 DOM 요소에 함수의 기능을 적용. table 요소를 모두 선택하여 테두리를 변경하는 기능. 선택자는 CSS선택자 문법에 따라 여러 가지 선택 가능. jQuery에서 지원하는 선택자를 이용하여 DOM 요소 선택 가능. (특정 css를 조작하거나 이벤트를 걸고 class를 추가하는 등의 수많은 함수 사용 가능)

$.get() : jQuery.get(url [, data] [, success(data, textStatus, jqXHR)] [, dataType])
--> HTTP GET 방식의 요청을 통해 데이터를 가져옴. success() 콜백 함수의 매개변수를 통해 데이터가 전달. 그 형식은 datatype(xml, json, script, html)에 따라 달라짐.

$.each() : jQuery.each(collection, callback(indexInArray, valueOfElement))
--> 기본 반복문. 배열이나 객체 집합 하나하나에 대한 기능을 콜백함수를 통해 구현 가능. 
      collection : 반복할 객체나 배열을 말함. 콜백 함수 : 객체나 배열 요소 하나하나에 대해 수행.


*Redis : Remote Dictionary Server, 키-값 구조의 비정형 데이터를 저장하고 관리하기 위한 오픈소스 기반 비관계형 데이터베이스 관리 시스템. 필요한 정보를 빠르게 저장하고 가져올 수 있는 실시간 서비스에 적합한 저장소.  (휘발성이나 임시성 데이터를 저장하는데 많이 사용)
 -다양한 데이터 타입
	string : 일반적인 문자열, text, int, jpeg 같은 binary 파일도 저장 가능
	set : string의 집합, 여러 개의 값을 하나의 value안에 넣을 수 있음. 한 key에 중복된 데이터 존재x, set에 포함된 요소의 수와 관계없이 일정한 시간으로 체크할 수 있는 것이 장점.
	sorted set : set에 score라는 필드가 추가된 데이터형, score는 일종의 가중치. score 기준으로 오름차순으로 내부 정렬됨. 
	lists : string의 집합, set과 유사하지만 일종의 양방향 linked list. push,pop으로 데이터 추가 및 삭제 가능
	hashes : value에 field와 string value 쌍으로 이루어진 테이블을 저장. 객체를 나타내는데 사용 가능,
 -redis 모듈은 node.js용 redis 클라이언트 라이브러리로, redis 커맨드 모두 지원. (redis 데이터베이스 프로그램은 따로 설치하고 실행해야 하므로 redis 모듈로 간단히 사용 가능)
	npm install redis
	npm install hiredis redis : 공식적인 hiredis C 라이브러리를 바인딩하여 Non-Blocking의 빠른 모듈
	sudo apt-get install redis-server : redis 서버 설치. 

*Redis 사용법
-Redis 서버와 연결 : 클라이언트 객체를 생성해 Redis 서버와 연결, redis 실행 시 필수 코드.
	var redis=require('redis');
	var client=redis.createClient();
	client.on('error', function(err){
		console.log('error' +err);
	});
-데이터 조작하기(키/값)
 set : 첫번째인자(키), 두번째인자(값), 출력을 통해 redis에 데이터 추가(key와 value 한 쌍 저장)
 get : 첫번째인자(키), 두번째인자(함수의 첫번째인자(err), 두번째인자(값))를 통해 출력
	client.set('String Key', 'String Value', redis.print); //redis print는 출력위한 것. 없어도 ok
	client.get('String Key', function(err, value){
		if(err) throw err;
		console.log(value);
	});
-해시테이블(해시맵) 데이터 조작하기
 hmset : 해시테이블에 key로 식별되는 value 값들을 항목으로 추가 가능. 첫번째 인자(해시테이블명), 두번째인자(항목들), key 한쌍에 여러 값 넣기 가능.
 hset : hmset와 같지만 hmset은 여러 개 입력, hest는 하나만 입력. 
 hget : 해당 해시테이블에서 인자로 받는 항목의 값을 가져옴. 첫번째 인자(해시테이블명), 두번째인자(항목), 세번째 인자 함수(첫번째 인자(에러), 두번째 인자(항목값))
 hkeys : 해당 해시테이블의 저장된 항목의 키값을 가져옴. 첫번째 인자(해시테이블명), 두번째인자(함수(첫번째인자(에러), 두번째인자(항목의 키들))
	client.hmset('codigm', {
		'goormIDE' : 'cloud service',
		'goormEDU' : 'edu service',
	}, redis.print);

	client.hset('Hash Key', 'HashTest 1', '1', redis.print);
	client.hset(['Hasth Key', 'HashTest 2', '2'], redis.print);

	client.hget('codigm', 'goormIDE', function(err, value){
		if(err) throw err;
		console.log('goormIde is : ' +value);
	});
	client.hkeys('codigm', function(err, keys){
		if(err) throw err;
		keys.forEach(funtion(key, i){
			console.log('codigm'+i+' : '+key);
		});
	});

-리스트에 존재하는 데이터 조작하기
 리스트는 매우 많은 데이터를 저장할 수 있지만 길이가 길어지면 검색 속도 또한 느려지게 됨.
 lpush : 리스트에 값 추가(첫번째인자(리스트명), 두번째인자(값), 세번째인자(출력))
 lrange : 리스트에 값 가져오기. (첫번째 인자(리스트명), 두번째 인자(시작지점), 세번째 인자(마지막 지점), 네번째 인자(함수(첫번째인자(에러), 두번째 인자(값))
 client.lpush('tasks', 'Node.js', redis.print);
 client.lpush('tasks', 'Redis', redis.print);
 client.lrange('tasks', 0, -1, function(err, items){
	if(err) throw err;
	items.forEach(function(item, i){
		console.log('list '+i+' : '+item);
	});
 });

-set에 데이터 조작하기
 set은 순서가 없는 문자열의 모음, 중복값 없음.
 sadd : set에 값을 추가
 smembers : 저장된 값을 반환
 client.sadd('test', 'goorm', redis.print);	//reply : 1
 client.sadd('test', 'codigm', redis.print);	//reply : 1
 client.sadd('test', 'goorm', redis.print);	//reply : 0 (두번째 저장이라 무시가 됨.)
 client.sadd('test', 'codigm2', redis.print);
 client.smembers('test', function(err, data){
	console.log(data);
 };

*Publisher/Subscriber : 메시지를 특정 수신자에게 직접 발송하지 못하는 곳에서 쓰이는 모델. 메시지를 발송하고 채널에서 구독하는 명령을 내림. ex 뉴스,날씨대시보드, 푸쉬알림 등 

*redis 모듈은 하나의 클라이언트가 메시지를 발생시키면 연결된 다수 클라이언트에게 메시지를 전달할 수 있는 구조인 Pub/Sub 모델 제공. 