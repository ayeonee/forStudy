[프로젝트 생성]
npm install -g create-react-app
create-react-app 프로젝트
cd 프로젝트명

[기초문법]
*HTML 코드 -> 함수 내 return ()안에. 
 class명 지정시 className 속성 사용.
 최상위 element는 한개여야 함. -> 쓸데없는 div element 여러 개 생성 방지용 빈태그 지원.
	<>
		<div className="container1">abc</div>
	</>

*class component : 원래 중요했으나 hooks 기능 나오면서 잘 쓰지 않게 됨.
import React, { Component } from 'react';		//react 라이브러리에서 함수 또는 클래스를 import. export된 다른 파일의 함수 또는 클래스를 불러와 사용할 수 있도록 함.
class Component1 extends Component{			//Component1이라는 컴포넌트를 선언
	render(){					//react.component의 하위 class에서 반드시 정의해야 하는 메서드. 리액트에서 사용하는 컴포넌트를 생성.
		return (<div> Hello Word! </div>);	//render함수를 통해 컴포넌트를 만들기 위한 HTML 반환.
	}	
}

export default Component1;				//다른 자바스크립트 파일에서 Component1이라는 class를 사용할 수 있게 export함.

*Functional Component : 부모 컴포넌트로 받은 값을 출력만 해주는 컴포넌트였지만 리액트 업데이트 이후 거의 모든 컴포넌트 선언에 사용됨. 
import React, { Component } from 'react';
const Component2 = () => {		//*화살표 함수 : [변수 선언부][함수명]=[인자값]=>[함수내부코드]
	return (
		<div>Hello World! </div>
	);
}
export default Component2;

*Split Component : 컴포넌트를 나눌 때는 주로 기능 별로

*export {default} from "./InputBox";
폴더까지만 경로를 설정해놓으면 index.js 파일을 제일 먼저 찾음. 위의 코드는 InputBox컴포넌트를 export하는 코드. 그렇기에 파일 이름 명시하지 않아도 컴포넌트 올바르게 Import 가능. 
index.js파일 없다면, InputBox.js 명시해주어야함. (js 파일은 확장자 생략이 가능함)

*import InputBox from "./components/InputBox";
하고 사용할 때에는 <InputBox />

*컴포넌트 스타일링1 : CSS Module : css 클래스를 불러올 때 [파일 이름]_[클래스 이름]_[해쉬값] 으로 고유한 클래스명을 부여하여 동일한 클래스명이 생기지 않게 만드는 기술. 적용하기 위해선 [파일이름].module.css로 저장해야 함. 모듈화를 했다면 js 파일에서 이에 맞게 변경해야 함. 

모듈화하기 : 파일명에 module 붙여주고 불러올 때 import styles from "/style.module.css"
	<div className={styles.phone_item}> 이런 식으로 사용.

*컴포넌트 스타일링2 : Sass  : 코드 재사용성이 뛰어나고 복잡한 작업을 쉽게 할 수 있음. (.scss 확장자가 많이 사용) 사용하려면 npm add node-sass 로 라이브러리 설치. css와 마찬가지로 모듈화 가능. (https://sass-lang.com/documentation 참고)

*컴포넌트 스타일링3 : styled-components : css를 js 코드 내에 작성하는 형태. 이와 같은 라이브러리를 CSS-in-JS 라이브러리라 부르는데, styled-components는 CSS-in-JS 라이브러리 중에서 가장 많이 사용됨. npm add styled-components 로 설치.
	styled-components는 styled.[태그명]을 통해 스타일링된 컴포넌트 생성. 

Template Literal : 기존( return "Hello "+name+"!"; ) -> ( return `Hello ${name}!`; )

*State : 컴포넌트 내에서 선언하는 데이터. 데이터를 관리하는데에만 사용되는 것이 아니라 UI 관련하여 작업시에도 사용 가능.

-사용법 : class components에서만 사용 가능. functional components에서는 사용 불가. 
	state={number :0} 으로 선언.
	사용시에는 {this.state.number}	 (return 구문안에서 변수를 사용하기 위해선 중괄호로 둘러 싸야함. state는 json 형식의 객체임.)
-setState() : 전달되는 값을 업데이트해주는 함수. state 안의 객체가 통째로 바뀌면 안됨.

*super() : state 초기화하는 함수.


*... : Spread 문법, 객체 또는 배열의 내용을 풀어주는 기능.
	ex. var a={name:"a", phone:"010-0000-0000", age:20});
	    var b={ ...a, name:"b"}; 	--> name:"b", phone:"010-0000-0000", age:20	

*Destructing Assignment 문법 : 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 기능. (https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment 참고)

*컴포넌트 폴더 내에서 index.js 파일 만들어 export하는 이유 :
서버는 파일 이름이 index인 것을 제일먼저 탐색함. 이 index.js 파일 안에서는 같은 폴더 내의 컴포넌트를 다시 export 했으므로 import문을 디렉토리까지만 적어도(import Number from "./components/Number";) 어떤 컴포넌트를 가져와야 할지 알 수 있음.

*Props : 부모 컴포넌트에게서 받는 데이터. 인자값으로 불러옴. props.[속성명] 으로 사용함.
	ex. const Number = props =>{ return <Count>{props.number}</Count>};

*map() : 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환.

*Object.values() : json형식에서 value값으로만 이루어져 있는 배열을 반환.
*Object.keys() : json 형식에서 key 값으로만 이루어져 있는 배열을 반환.


*자바스크립트 Event 객체 : DOM과 관련된 이벤트가 발생했을 때 관련 정보를 저장하는 객체. e.target은 해당 이벤트가 발생한 element가리킴. 

*onClick={()=>onClick(id)} 라고 하고 onClick={onClick(id)} 라고 하지 않는 이유 : React에선 이벤트 핸들러로 함수 그 자체를 전달해야하기 때문. onClick 같은 이벤트 속성에 핸들러를 전달할 때는 "onClick={onClick}" 같이 소괄호 제외하고 보냄. 다만, 위의 예시에선 onClick 함수가 id 파라미터를 받기 때문에 Arrow fuction 으로 새 함수 만듦.