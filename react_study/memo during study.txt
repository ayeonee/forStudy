[프로젝트 생성]
npm install -g create-react-app
create-react-app 프로젝트
cd 프로젝트명

[기초문법]
*HTML 코드 -> 함수 내 return ()안에. 
 class명 지정시 className 속성 사용.
 최상위 element는 한개여야 함. -> 쓸데없는 div element 여러 개 생성 방지용 빈태그 지원.
	<>
		<div className="container1">abc</div>
	</>

*class component : 원래 중요했으나 hooks 기능 나오면서 잘 쓰지 않게 됨.
import React, { Component } from 'react';		//react 라이브러리에서 함수 또는 클래스를 import. export된 다른 파일의 함수 또는 클래스를 불러와 사용할 수 있도록 함.
class Component1 extends Component{			//Component1이라는 컴포넌트를 선언
	render(){					//react.component의 하위 class에서 반드시 정의해야 하는 메서드. 리액트에서 사용하는 컴포넌트를 생성.
		return (<div> Hello Word! </div>);	//render함수를 통해 컴포넌트를 만들기 위한 HTML 반환.
	}	
}

export default Component1;				//다른 자바스크립트 파일에서 Component1이라는 class를 사용할 수 있게 export함.

*Functional Component : 부모 컴포넌트로 받은 값을 출력만 해주는 컴포넌트였지만 리액트 업데이트 이후 거의 모든 컴포넌트 선언에 사용됨. 
import React, { Component } from 'react';
const Component2 = () => {		//*화살표 함수 : [변수 선언부][함수명]=[인자값]=>[함수내부코드]
	return (
		<div>Hello World! </div>
	);
}
export default Component2;

*Split Component : 컴포넌트를 나눌 때는 주로 기능 별로

*export {default} from "./InputBox";
폴더까지만 경로를 설정해놓으면 index.js 파일을 제일 먼저 찾음. 위의 코드는 InputBox컴포넌트를 export하는 코드. 그렇기에 파일 이름 명시하지 않아도 컴포넌트 올바르게 Import 가능. 
index.js파일 없다면, InputBox.js 명시해주어야함. (js 파일은 확장자 생략이 가능함)

*import InputBox from "./components/InputBox";
하고 사용할 때에는 <InputBox />

*컴포넌트 스타일링1 : CSS Module : css 클래스를 불러올 때 [파일 이름]_[클래스 이름]_[해쉬값] 으로 고유한 클래스명을 부여하여 동일한 클래스명이 생기지 않게 만드는 기술. 적용하기 위해선 [파일이름].module.css로 저장해야 함. 모듈화를 했다면 js 파일에서 이에 맞게 변경해야 함. 

모듈화하기 : 파일명에 module 붙여주고 불러올 때 import styles from "/style.module.css"
	<div className={styles.phone_item}> 이런 식으로 사용.

*컴포넌트 스타일링2 : Sass  : 코드 재사용성이 뛰어나고 복잡한 작업을 쉽게 할 수 있음. (.scss 확장자가 많이 사용) 사용하려면 npm add node-sass 로 라이브러리 설치. css와 마찬가지로 모듈화 가능. (https://sass-lang.com/documentation 참고)

*컴포넌트 스타일링3 : styled-components : css를 js 코드 내에 작성하는 형태. 이와 같은 라이브러리를 CSS-in-JS 라이브러리라 부르는데, styled-components는 CSS-in-JS 라이브러리 중에서 가장 많이 사용됨. npm add styled-components 로 설치.
	styled-components는 styled.[태그명]을 통해 스타일링된 컴포넌트 생성. 

Template Literal : 기존( return "Hello "+name+"!"; ) -> ( return `Hello ${name}!`; )

*State : 컴포넌트 내에서 선언하는 데이터. 데이터를 관리하는데에만 사용되는 것이 아니라 UI 관련하여 작업시에도 사용 가능.

-사용법 : class components에서만 사용 가능. functional components에서는 사용 불가. 
	state={number :0} 으로 선언.
	사용시에는 {this.state.number}	 (return 구문안에서 변수를 사용하기 위해선 중괄호로 둘러 싸야함. state는 json 형식의 객체임.)
-setState() : 전달되는 값을 업데이트해주는 함수. state 안의 객체가 통째로 바뀌면 안됨.

*super() : state 초기화하는 함수.


*... : Spread 문법, 객체 또는 배열의 내용을 풀어주는 기능.
	ex. var a={name:"a", phone:"010-0000-0000", age:20});
	    var b={ ...a, name:"b"}; 	--> name:"b", phone:"010-0000-0000", age:20	

*Destructing Assignment 문법 : 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 기능. (https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment 참고)

*컴포넌트 폴더 내에서 index.js 파일 만들어 export하는 이유 :
서버는 파일 이름이 index인 것을 제일먼저 탐색함. 이 index.js 파일 안에서는 같은 폴더 내의 컴포넌트를 다시 export 했으므로 import문을 디렉토리까지만 적어도(import Number from "./components/Number";) 어떤 컴포넌트를 가져와야 할지 알 수 있음.

*Props : 부모 컴포넌트에게서 받는 데이터. 인자값으로 불러옴. props.[속성명] 으로 사용함.
	ex. const Number = props =>{ return <Count>{props.number}</Count>};

*map() : 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환.

*Object.values() : json형식에서 value값으로만 이루어져 있는 배열을 반환.
*Object.keys() : json 형식에서 key 값으로만 이루어져 있는 배열을 반환.


*자바스크립트 Event 객체 : DOM과 관련된 이벤트가 발생했을 때 관련 정보를 저장하는 객체. e.target은 해당 이벤트가 발생한 element가리킴. 

*onClick={()=>onClick(id)} 라고 하고 onClick={onClick(id)} 라고 하지 않는 이유 : React에선 이벤트 핸들러로 함수 그 자체를 전달해야하기 때문. onClick 같은 이벤트 속성에 핸들러를 전달할 때는 "onClick={onClick}" 같이 소괄호 제외하고 보냄. 다만, 위의 예시에선 onClick 함수가 id 파라미터를 받기 때문에 Arrow fuction 으로 새 함수 만듦.


*LifeCycle API : react에서 모든 컴포넌트는 여러 종류의 LifeCycle Method를 가짐. 각 컴포넌트에서는 이 메소드를 오버라이딩하여 특정 시점에서 코드가 실행될 수 있게 설정할 수 있음. 

-Component Mount LifeCycle API : 컴포넌트 마운트와 관련된 API. 해당 LifeCycle API들은 아래와 같은 순서로 호출됨.
	1. constructer()	: React 컴포넌트의 생성자. 생성자는 해당 컴포넌트가 마운트되기 전에 호출됨. this.state에 객체를 할당하여 state 초기화하거나 인스턴스에 이벤트 처리 메서드 바인딩할 때 사용.
	2. static getDerivedStateFromProps() 	: 시간의 흐름에 따라 변하는 props을 state로 동기화하는 작업이 필요한 경우 사용. state 갱신하기 위한 객체 반환하거나 null 반환하여 갱신 작업 안할수도 있음. 컴포넌트 인스턴스 접근이 불가능함. 
	3. render()		: 반드시 클래스 컴포넌트에서 구현. 컴포넌트의 state를 변경하지 않고, 호출될 때마다 동일한 결과를 반환해야하고 브라우저와 직접적인 상호작용 하지 않음.
	4. componentDidMount()	: 컴포넌트가 마운트된 직후 호출됨. DOM을 사용해야하는 라이브러리를 불러와 초기화하거나 외부에서 데이터 불러오기 위해 네트워크 요청을 보내는 등의 작업이 필요할 때 사용.

-Component Update LifeCycle API : 컴포넌트 업데이트와 관련된 API. 해당 LifeCycle API들은 아래와 같은 순서로 호출됨.
	1. static getDerivedStateFromProps()
	2. sholudComponentUpdate() 		: props 또는 state가 새로운 값으로 갱신되어서 렌더링이 발생하기 직전에 호출됨. 기본적으로 true 반환. 따로 작성한 특정 조건에 따라 false를 반환하면 render 함수 실행하지 않음. 성능 최적화가 필요할 때 유용하게 사용됨.(큰 규모의 프로젝트 진행시 사용하면 성능 개선에 좋음)
	3. render()	
	4. getSnapshotBeforeUpdate()		: DOM 변화가 일어나기 직전의 상태를 가져옴. 반환 값은 componentDidUpdate 메소드의 인자로 전달됨. 
	5. componentDidUpdate()		: render 메소드 호출된 뒤에 발생. 컴포넌트가 갱신되었을 때 DOM을 조작하는 경우 사용가능함. 또 props의 변경 여부를 파악해 특정 함수를 실행하게 하는 작업도 가능.

-Component Unmount LifeCycle API : 컴포넌트 마운트와 관련된 API, 하나밖에 없으며 많이 사용됨.
	1. componentWillUnmount() : 컴포넌트가 제거될 때 호출됨. 이 컴포넌트가 호출되었다는 말은 컴포넌트가 re-rendering 되지 않을것이란 말이므로 해당 메소드 내에선 setState 호출 절대 불가.

(https://edu.goorm.io/learn/lecture/16422/%EA%B0%80%EC%9E%A5-%ED%95%AB%ED%95%9C-fe-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-react-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EC%95%84%EB%B3%B4%EA%B8%B0/lesson/814039/component-update-lifecycle-api 참고)



*Hooks :상태 관리를 할 수 있음. class를 사용하지 않아도 state와 다른 react 기능들을 사용할 수 있음. 
-useState() : 상태값과 상태값을 변화시키는 함수를 배열 형식으로 반환함. useState의 인자는 상태 값의 초깃값에 해당함. 
	const [number, setNumber] = useState(0);	//처음 number는 0. number은 상태값, setNumber는 상태값을 변화시키는 함수.
-useEffect() : 3개의 LifeCycle API(componentDidMount, componentDidUpdate, componentWillUnmount)를 구현할 수 있음. 
	1. useEffect((함수), 빈배열) : 컴포넌트가 처음 렌더링될 때만 함수 실행. 
	2. useEffect(함수, 배열(state,props같은 값들어올 수 있음)) : 배열에 특정 변수가 들어있다면, useEffect는 그 변수의 값이 변경될 때 함수 실행시킴. 
	3. useEffect(함수) : 두번째 인자값 없다면 컴포넌트가 업데이트될 때 실행시킴. 

*Custom Hooks : Hooks를 더 생산적으로 활용할 수 있음. 보통 파일 이름에 use를 붙이는 게 관례.


*Redux : 글로벌 상태 관리 라이브러리. 모든 컴포넌트에서 쉽게 상태에 접근 및 상태를 변화시킬 수 있음. 
1. State : redux 애플리케이션의 전체 상태를 나타냄. 보통 store에 의해 관리됨.
2. Store : 애플리케이션 상태 트리를 가지고 있는 객체. redux 앱에서는 단 하나의 스토어만 가지고 있어야함.
3. Action : 상태를 변화시키려는 것을 표현하는 객체. 즉, 상태를 변화시키기 위해서는 액션을 생성해야함. 액션은 스토어에 데이터를 넣는 유일한 방법. type 필드를 꼭 가지고 있어야 하고 그 뒤에 사용자가 넣고 싶은 데이터를 자유롭게 넣을 수 있음. 
	{ type : "counter/INCREASE", // 필수	value : 1	}
4. Action Creators : 액션 생성자, 액션을 만드는 함수. 단순히 액션을 만들기만 하고 스토어에 실제 요청을 보내진 않음. 
	const increase = value => ({ type : "counter/INCREASE", 	value });
5. Dispatch (디스패치 함수) : 액션을 인자값으로 받는 함수. 인자값으로 받은 액션을 스토어에 보내 상태 관리를 요청. 스토어에서 요청을 바으면 해당 액션을 처리하는 로직을 실행 시킴. 
	store.dispatch(increase(10))
6. Reducer : 리듀서, Redux에서 가장 중요한 개념. 실제 상태 변화가 발생하는 함수이고 dispatch를 통한 요청을 받으면 실행되는 함수. 액션 객체의 type 값에 따라 특정 함수 실행시키고 새로운 상태 만들어 반환함.

*Redux의 3가지 원칙
1. Single source of truth : 애플리케이션의 모든 상태는 하나의 스토어 안에 하나의 객체 트리 구조로 저장됨. 
2. State is read-only : 상태를 변화시키는 유일한 방법은 상태 변화를 나타내는 액션 객체를 전달하는 방법뿐. 모든 상태 변화는 중앙에서 관리되고, 엄격한 순서에 의해 하나 하나 실행되기 때문에 기록을 남기고 저장할 수 있음.
3. Changes are made with pure functions : 순수한 리듀서를 작성해야함. 액션을 가지고 상태를 변경해주고, 이전의 상태는 건들지 않고 새로운 상태를 만들어 반환함. 그리고 똑같은 파라미터를 받아 실행된 리듀서는 언제나 똑같은 값만 반환해야 함. 리듀서 함수 내부에서 네트워크및 데이터베이스 접근, math와 date 같은 순수하지 않은 api를 호출하는 코드가 있으면 안됨. 이런 작업은 리듀서 바깥에서 처리하고 이를 위해 보통 미들웨어를 사용함.