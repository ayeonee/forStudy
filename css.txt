p.47 CSS
CSS : Cascading Style Sheets. 스타일=웹 페이지와 관련도니 스타일 지칭. Cascade=스타일이 적용될 때 우선순위를 가지고 순차 적용 됨.
선택자(Selector) : HTML의 일반적인 태그를 가리키고 있는 이름. 선택자는 일종의 연결 통로. 
	스타일을 지정할 특정 HTML 요소를 선택하는 역할 수행. 
	html의 id 이름을 css에 연결하려면, css에 선택자를 #id이름 으로 하면됨.
속성(Property) : HTML의 속성은 attribute(구분하기), 지정 또는 변경하고 싶은 스타일 속성의 이름.
	font-family, font-size, color, background, position 등 다양한 요소 사용 가능.
값(Value) : CSS에 정의된 특정 키워드(blue, block 등)와 수치와 특정 단위(px, %, em, rem, vh, vw 등)로 나뉨.
	프로퍼티와 짝을 이루어 사용. 
선언 블록(Declaration Block) : 선택자 뒤에 위치한 {} 안의 한 블록 또는 덩어리.
	선언 : 프로퍼티와 값의 짝. (ex. font-size: 16px;), 세미콜론 필수

**css를 html에 적용하기**
1. HTML 문서 안에 스타일 코드를 넣는 방법 : <style>과 </style> 안에 CSS코드 넣기.
	보통 <head>, </head>사이에 넣으나 HTML 문서의 어디에 넣어도 적용. 또다른 HTML 문서에는 적용 불가.
2. 별도의 CSS파일과 HTML문서 연결하는 방법 : 적용을 원하는 HTML 문서에 코드 추가.
	<link rel="stylesheet" href="css파일이름.css">
	+HTML과 CSS파일이 같은 폴더에 있다고 가정했을 때 코드이고 경로는 적절히 수정해야함.

p.48 선택자
CSS에서는 , 로 선택자 여러개의 스타일을 한꺼번에 지정할 수 있음.

p.49 CSS의 기본 단위 : 값에 들어갈 수 있는 것
크기 단위 : 글자 사이즈, 높이나 너비를 정하는 등 크기와 관련된 값을 조정할 때. 크기 단위를 이용하여 수치 조정
	고정 크기 단위 : px(웹에서 대표적으로 쓰임), pt, in, cm, mm (차례대로 픽셀, 포인트, 인치, 센티미터, 밀리미터)
		픽셀: CSS에서 쓰는 1px은 정해진 절대 길이로 쓰임. (장치의 해상도에 따라 다른 크기를 갖기 때문에 브라우저에서의 1px을 1/96 inch로 고정 해둠)
	가변 크기 단위 : em, %, rem, vw, vh, vmin, vmax, ex 
		(차례대로 배수 단위(부모의 글자크기에 따라 기준점 달라짐.), 백분율 단위, 배수 단위(최상위 요소의 글자크기에 따라 달라짐.)	, 화면비 백분율 단위(w,h), 화면비 최솟값, 화면비 최댓값, 현재 폰트의 x-height 값)
		em, rem은 모두 상대적인 길이. em은 현재 스타일이 지정되는 요소의 폰트 크기 기준, rem은 최상위 요소의 폰트 크기 기준.
		%는 기준이 되는 상위 요소의 font-size 기준이 아닌 너비,높이,폰트 크기 등 각각의 프로퍼티 값의 상대적인 값을 가짐.
	웹 브라우저는 기본적으로 16px을 기본으로 font-size 갖음. 
	다양한 사이즈의 브라우저 환경이 하나로 정형화 되지 않거나 웹 페이지를 확대,축소 해야할 때 이에 반응하는 웹을만들려면 상대 길이를 사용해야 함.
	+반응형 웹(Responsive Web) : 기기에 따라 반응하는 웹. em보단 rem을 사용하길 권장.

p.50 CSS의 색상: 키워드, hex code, rgb
키워드 : 색을 지정하는 가장 간단한 방법. 내부적으로 지정되어있는 키워드를 사용. 140가지 색상 지원. (https://www.w3schools.com/colors/colors_names.asp)
RGB : r,g,b 0~255까지. rgb(0,0,0)으로 나타냄. +alpha값은 0~1
HEX Code : 16진수 6자리 코드. 2자리씩 r,g,b값 나타냄. +alpha 값은 2자리 추가하여 표현 0~100.

p.53 선택자 - <단순 선택자>
타입 선택자(Type Selector) : 해당 태그를 가지는 모든 요소에 스타일을 적용. 선택자 자리에 태그를 넣으면 태그에 해당하는 모든 요소에 스타일이 적용.
	p{ color : red; }
아이디 선택자(ID Selector) : 아이디 이름으로 스타일을 적용. HTML 내에서 중복된 아이디는 존재할 수 없음. 아이디 속성을 이용하고 #과 지정할 id를 함께 사용함.
	#groom { background-color : blue; }
클래스 선택자(Class Selector) : 클래스(비슷한 특징을 가지는 요소들에게 지정하는 속성) 속성을 선택자로 사용하여 스타일을 적용. .과 지정할 class를 함께 사용.
	.mafia{ color : white; }
	+클래스는 비슷한 스타일을 묶어 스타일을 적용시키고 싶을 때 많이 사용.
전체 선택자(Universal Selector) : 모든 요소에 스타일을 적용. 모든 요소에 적용시키기 때문에 속도가 저하될 수 있음. 선택자 자리에 * 입력.
	* { color : yellow; }
속성 선택자(Attribute Selector) : 특정 HTML 속성을 가지고 있는 모든 요소에 스타일을 적용. 선택자 오른쪽에 []로 속성과 속성 값 작성.
	a[target="_blank"]{ color : red; }

p.54 선택자 - <복합 선택자>
부모-자식-후손 요소 : 부모(article)와 나(div), 자식(p) 이라고 가정. 부모-자식 관계는 상대적(<p> 기준으로 <div>가 부모)
	<article>
	부모 요소
	<div>
		나
		<div>자식 요소 1</div>
		<p>자식 요소 2</p>
		<div>자식 요소 3</div>
	</div>
	</article>
부모 요소(Parent Element) : <div>의 상위 요소인 article은 <div>의 부모요소.
자식 요소(Child Element) : <div>안에 포함되는 하위요소인 <p>, <div>는 <div>의 자식요소.
후손 요소(Descendant Element) : 부모 아래의 모든 하위 요소.
-->HTML의 부모-자식-후손 관계에 따라 CSS에서 또한 자식과 후손과 연관된 선택자인 자식 선택자, 후손 선택자를 사용.

자식 선택자(Child Selector) : 선택자 A의 모든 자식 중 선택자 B와 일치하는 요소를 선택. 선택자를 두개 사용하고 >를 써줌.
	바로 하위에 해당하는 자식 요소에만 스타일을 적용하고 싶을 때 자식 선택자를 사용.
	선택자A > 선택자B { color : green; }
후손 선택자(Descendant Selector) : 선택자A의 모든 후손 중 선택자 B와 일치하는 요소를 선택. 선택자를 두개 사용하고 띄어쓰기를 써줌.
	선택자A 선택자B { color : yellow; }

p.55 선택자 - <가상 클래스 선택자>
가상 클래스(Pseudo-class) : 클래스와 달리 직접 정의할 수 없고 실제 HTML에 보이지 않음.
선택자에 가상 클래스를 붙여 가상 클래스 선택자로 이용.
	선택자:pseudo-class{ color:red; }
대표적인 가상 클래스 : 링크 태그와 관련된 가상 클래스
	a:link (방문하지 않은 링크일 때)
	a:visited (방문한 링크일 때)
	a:hover (링크에 마우스를 올렸을 때)
	a:active (선택된 링크일 때)

p.58 Box 모델
HTML의 모든 요소가 상자 형태를 가진다 = 브라우저에 출력되는 컨텐츠가 사각형 박스 형태로 출력.
박스모델 : 내용(Content) + 패딩(Padding) + 경계선(Border) + 마진(Margin)
	내용 : 이미지나 텍스트같이 코드 상에서 태그 사이에 담은 내용. 실제로 담고 있는 부분
	경계선 : 내용(content)을 감싸고 있는 테두리
	패딩 : 컨텐츠와 경계선 사이의 여백
	마진 : 경계선 밖의 여백

p.59 content
width, height : 너비와 크기는 box 모델 중 content의 크기에 해당. 컨텐츠 영역의 크기가 지정되어 있는 상태에서 컨텐츠의 크기를 늘리면 컨텐츠 박스를 벗어남.
	컨텐츠 박스의 내용이 컨텐츠 박스에 지정된 크기보다 크더라도 컨텐츠 박스를 기준으로 배치됨. (마진, 패딩 등이 없는 경우)

p.60 border
border-style : 선의 스타일, 선의 종류를 지정함. (none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset | initial | inherit)
	자주 사용하는 4가지 : 실선(solid), 파선(dashed), 점선(dotted), 이중선(double)
	네 방향의 스타일을 동시에 적용하면 top, right, bottom, left의 순서로 스타일 지정.
	방향을 지정하는 프로퍼티(ex. border-top-style : solid;)와 함께 사용하지 않는 이상, 사용하는 개수에 따라 적용되는 스타일의 위치가 달라짐.

border-width, border-color : 선의 두께와 색 지정. body-style 없이 지정했을 땐 적용되지 않음.
	style과 마찬가지로 사용하는 개수에 따라 적용되는 위치가 달라지고, 위치를 지정하여 따로 스타일 지정 가능

shortcut 속성 : border 프로퍼티는 shortcut으로 한번에 지정 가능. 
	border : red solid 1px;
	border-bottom : red solid 1px; (한 면만 지정하고 싶으면)

border-radius : border로 만든 경계선을 둥글게 표현할 때 사용. 테두리 존재 여부와 별개로 전체 background에 적용됨. 원이나 모서리가 둥근 사각형을 만들고 싶다면 border 없이 border-radius 이용.
	border-radius : 12px; (여기서 px은 모서리 반지름의 값)
+shortcut 이용하여 한번에 지정하거나 네 방향으로 나누어 부분적용 가능.
+타원형의 radius 적용 : 가로 반지름 적고 세로 반지름 적음. (ex. 24px 12px)
+네 모서리에 모두 적용하고 싶다면 /로 구분. (ex. border-radius: 8px 16px 24px 36px / 36px 24px 16px 8px;) 

p.61 padding과 margin
border 기준으로 경계선 내부 여백을 패딩(padding), 경계선 외부 여백을 마진(margin).
네 방향 따로 혹은 한꺼번에 모두 적용 가능.
	margin : 12px 24px 32px 63px; /*상 우 하 좌*/
	padding : 6px 12px 24px 32px; /*상 우 하 좌*/

마진 상쇄 : 위 아래로 맞닿은 두 요소 사이 마진은 더 큰쪽을 기준으로 결정. 두 요소에 각각 마진을 적용하더라도 서로 맞닿아 있다면 마진이 따로 존재하지 않음.

box-sizing : content-box; --> content-box 기준으로 크기를 정함.
box-sizing : border-box; --> border 바로 전 padding까지를 기준으로 정함.
즉, 기본 값인 content-box의 width 값은 컨텐츠만의 사이즈. border-box는 컨텐츠의 크기와 패딩까지 합한 값.

p.64 글자 관련 스타일
폰트(Font) 관련 프로퍼티 : 크기(font-size), 종류(font-family), 형태(font-style, font-weight)

font-family : 일반적으로 한 단어로 구성된 폰트명은 따옴표 없이 사용 가능, but 띄어쓰기 또는 -이 들어간 폰트명은 따옴표를 사용하여 하나의 폰트명임을 명시.
	모든 이용자의 기기에 동일한 폰트가 없을 수도 있기에 폰트를 여러개 지정하여 앞 순서에 위치한 폰트부터 차례로 적용. 첫번째 폰트가 없으면 두번째 폰트를 적용.
	때문에 항상 마지막 폰트는 모든 OS 및 브라우저에 기본으로 설치된 일반 글꼴을 두어 실행. (보통 Sans-serif, Serif, Cursive, Fantasy, Monospace..)
	font-family: '폰트이름1', '폰트이름2';
+웹폰트(Web Font) : 링크를 통해 폰트를 불러오는 방식. 
	구글폰트-폰트선택-원하는 굵기 선택-Select this style-오른쪽상단메뉴-Embed-<link>와 @import 두 방식으로 불러옴.
	<link> 방식 : <link> 태그 이용하여 폰트 가져오기
	@import 방식 : CSS파일에 <style> 태그 제거 후 @import 작성 or HTML 파일에 <style> 태그 이용

p.65 폰트의 크기와 형태
font-sytle : normal(기본 값), italic(이탤릭체가 디자인되어 있는 폰트에서 사용), oblique(이탤릭체 디자인이 없더라도 무조건 글자를 기울여서 표현)
font-weight : 폰트 굵기 지정할 때 사용. bold 혹은 100~900의 숫자값 사용.(보통 normal이 400, bold가 700)
일일이 font 관련 프로퍼티 적용이 불편할 수 있기에 font 프로퍼티를 써서 모든 과정 한번에 설정가능.
	font: font-style font-weight font-size font-family 순서로 띄어쓰기로 구분하여 작성. 순서를 반드시 지켜야 하며 font-style과 font-weight는 생략해도 무관.

p.66 텍스트 정렬
text-align : (left right center) 텍스트 좌, 우, 중앙 정렬.
	해당 정렬 기준은 '본인'. 부모요소나 웹의 크기와 상관없이 text-align이 적용된 해당 요소를 기준으로 정렬.
	+justify : 좌우로 띄어쓰기를 늘려 붙임. 

line-height : 문장 사이의 간격을 조정하는 프로퍼티. 
	line-height : 2 or 28px; (단위 없는 숫자 값은 해당 요소의 font-size를 기준 한 배수로 높이를 조정)

letter-spacing : 자간(글자 사이의 간격 조정)
	letter-spacing : 5px; 

text-indent : 문단 시작부에 들여쓰기 저장.
	text-indent : 16px;

p.69 위치 정렬 - block과 inline
display : 요소가 보여지는 방식을 지정하는 프로퍼티. 기본 값으로 block 혹은 inline 가지고 있음.
display:block : 항상 새로운 줄에서 시작, 따로 너비를 지정하지 않아도 width 100%를 기본값으로 가짐. 크기를 직접 지정한다면 자동으로 남은 길이를 margin으로 채움.(div, h1~h6, p, header, footer, section..)
display:inline : 새로운 줄에서 시작하지 않고 필요한 만큼(요소의 컨텐츠 크기만큼)의 너비만 가짐. 부모의 너비 안에서 한 줄에 들어갈 수 있는만큼 일렬로 배치. (span,a,img...)
	block은 전체 문단과 같이 큰 맥락을 가질 때 사용하지만 inline은 그 안에 들어가는 단어, 링크, 이미지 등에 쓰임.
	block이 쓸 수 있는 프로퍼티 : width, height, margin, padding 모두 사용 가능
	inline은 width, height, margin-top, margin-bottom 프로퍼티 지정 불가능.

p.70 위치 정렬 - inline-block
(display:inline 에서 width, heightm margin-top, margin-bottom 프로퍼티가 적용되지 않는 것을 해결하기 위해)
display: inline-block : block 과 inline의 특징을 모두 가짐. 기본적인 쓰임은 inline과 동일하지만 사용할 수 없었던 프로퍼티 지정 가능.

display:none : 브라우저에 해당 요소가 출력되지 않음.

p.71 위치 정렬 - position
position : 요소를 배치하는 방법을 정하는 프로퍼티.
position:static : static이 기본. static 에서는 좌표 프로퍼티(top, right, bottom, left) 사용 불가.
position:relative : 상대 위치. 기본 위치를 기준으로 좌표 프로퍼티를 이용하여 위치 이동. 
	(left:16px; top:16px;) 라면 원래 위치보다 위에서 16px, 왼쪽에서 16px 만큼 멀어지게 됨.
position:absolute : 절대 위치. 부모 요소나 조상 요소 중 relative, absoulte, fixed가 선언된 곳을 기준으로 좌표 프로퍼티 작동.
	부모나 조상 프로퍼티에 relative, absolute, fixed가 없다면 최상단 태그인 <body> 기준으로 위치 지정.
position:fixed : 보이는 화면을 기준으로 좌표 프로퍼티를 이용하여 위치를 고정 시킴. 스크롤할때 따라다니는 메뉴가 fixed 활용한 것.

+z-index : 수직으로 어떻게 쌓이는지 정함. 값은 숫자로 표현되고 숫자가 클수록 전면에 출력. static 제외한 요소에서만 적용.

p.72 위치 정렬 - float
float : 요소를 디자인 흐름에서 벗어나게 한 뒤, 사용자가 지정한 방향에 배치하도록 하는 프로퍼티.
	float : left; or right;

p.75 위치 정렬 - flexbox
flexbox : 크기가 불분명한 요소들에 대해 효율적으로 동작하고, 특별한 계산없이 쉽게 정렬할 수 있음.
	flex container(부모 요소) + flex item(자식 요소)로 구성. 
	프로퍼티 : flex container(flex-direction, flex-wrap, flex-flow, justify-content, align-items, align-content), flex item(flex, flex-grow, flex-shrink, flex-basis, order)
	정렬하고자 하는 요소의 부모요소인 flex container에 [display: flex;] 추가하면 됨. 이를 사용하지 않으면 flex를 사용할 수 없음.
	기본적으로 가로 혹은 세로로 정해둔 방향을 기준으로 프로퍼티를 정렬. 요소들을 띄엄띄엄 일정한 간격으로 배치하거나 요소들로 화면을 꽉 채워 배치 등 다양한 웹 레이아웃 구현

p.76 flex container : 방향과 흐름을 정의한느 프로퍼티.
flex-direction : flex container안에서 flex item이 배치될 기본 방향을 정함. 이 프로퍼티를 따로 지정하지 않으면 row로 기본 설정.(왼쪽에서 오른쪽으로 정렬)
	flex-direction: column; (세로 방향으로 정렬) row; (가로 방향으로 정렬) row-reverse; (가로 역순) column-reverse; (세로 역순)

flex box는 일반적으로 한 줄에 들어가도록 정렬. .container의 width를 줄이면 기존에 정의되어 있던 width는 무시되고 부모 요소인 .container의 너비에 맞춰 줄어듦. width가 너무 작게 줄어들어 .item을 줄일 수 없게 되면 item이 container벗어남.
flex-wrap : flex item들을 여러 줄에 나열하고 싶을 때 사용. item들을 한 줄에 담을 수 없을 때 [ flex-wrap: wrap; ]을 이용하면 item이 다음 줄로 넘어감.
	flex-wrap을 따로 지정하지 않으면 기본 값으로 nowrap이 설정. (모든 item이 한 줄에 출력)
flex-flow : flex-direction과 flex-wrap은 flex-flow로 한번에 지정할 수 있음.
	flex-flow : column wrap;

p.77 flex-container : 정렬1
justify-content : flex-direction으로 정해진 방향에 flex item들을 어떻게 정렬할 것인지를 결정. (ex. 문서 편집기의 가운데 정렬)
	flex-start, center, flex-end; : flex-direction이 row일 때 왼쪽 끝, 가운데, 오른쪽 끝을 기준으로 정렬 (ex. justify-content : flex-start; justify-content : center; )
					column일 때 위 끝, 가운데, 아래 끝을 기준으로 정렬
	space-between : 시작과 끝을 기준으로 하여 item들을 동일한 간격으로 배치
	space-around : 시작과 끝에 item을 하나씩 두고 그 사이 남은 공간을 동일한 간격으로 나눠 나머지 item 배치.

p.78 flex-container : 정렬2
align-items : item을 flex-direction에서 정해진 방향의 수직 방향으로 정렬. 기본 값으로 stretch 갖음. .item에 따로 높이를 지정해주지 않으면 자동으로 부모 요소의 크기만큼 늘어남.
	flex-start , center, flex-end : 수직이 시작하는 부분부터 정렬, 가운데 위치부터 정렬, 수직이 끝나는 부분부터 정렬.

+baseline : justify-content와 align-items에서 모두 사용 가능. 글꼴의 기준선인 baseline을 기준으로 flex item들을 정렬.

p.79 flex-container : 정렬3
align-content : flex item들이 여러 줄일 경우 flex-direction 방향을 기준으로 수직 정렬 방법 결정. 기본 값은 stretch. 
	flex-start, center, flex-end : align-items 들과 비슷
	space-between : 수직 방향으로 끝과 끝에 하나씩 기준을 두고 그 사이에 배치.
	space-around : 모든 간격을 동일하게 배치.
**align-content의 경우 여러 줄에 걸친 item들이 한 몸처럼 움직이고, align-items의 경우 각 줄이 따로 나뉘어 정렬됨.
**align-content 사용하려면 flex-wrap : wrap이 꼭 포함되어 있어야 함.

p.80 flex item
flex item의 프로퍼티는 display: flex가 적용된 부모 요소의 자식 요소에만 사용 가능.
flex-grow : flex item의 확장과 관련. 단위 없는 숫자값(비율)을 사용하며 기본값은 0. 
	값이 0일 경우 flex container가 커져도 flex item의 크기는 커지지 않고 원래 크기 유지.
	값이 1이상일 경우 flex item의 원래 크기와 상관 없이 flex container를 채우기 위해 flex item도 커짐.
	flex-grow 크기는 비율이기 때문에 flex container의 크기가 커지거나 줄어들면 동일한 비율로 크기가 커지거나 줄어듦.
flex-shrink : flex item의 축소와 관련. 단위 없는 숫자값(비율)을 사용하며 기본값은 1.
	값이 0일 경우 flex container가 줄어도 flex item의 크기는 줄어들지 않고 원래 크기 유지.
	값이 1이상일 경우 flex container 크기가 작아질 때 flex item의 크기가 flex container 크기에 맞춰 줄어듦.
flex-basis : flex item의 기본 크기 결정. 기본값은 auto. 단위로는 모든 크기 단위 사용 가능.
	auto : 각 flex item의 크기가 flex-basis로 할당. 남은 크기를 flex grow에 따라 2:1의 비율로 나눠 가짐.
	0 : flex-grow에 따라 각 flex item의 크기가 2:1:1 비율로 나눠짐.
	100px (수치를 값으로 가지는 경우) : 각 컨텐츠마다 100px을 제외, 총 300px에 해당하는 값을 제외한 크기를 2:1:1비율로 나눠 가짐.
flex : flex-grow, flex-shrink, flex-basis를 한번에 설정. 이 순서대로 값을 넣어야 함.
	flex-grow : 1;
	flex-shrink : 0;	==	flex : 1 0 400px;
	flex-basis : 400px;

p.83 grid layout 기본
grid : 격자 혹은 눈금. flexbox가 줄에 대한 정렬이었다면 Grid는 격자, 행렬을 통해 요소들을 좀 더 정교하고 복잡하게 정렬 및 배치할 수 있는 레이아웃 시스템.
-grid lines : 격자를 이루는 선의 집합. grid를 이루는 행과 열의 선들을 모두 grid lines라고 함.
	grid column : grid lines에서 열	  grid row : grid lines에서 행
-grid track : 평행한 grid line 두 줄 사이의 공간. 선과 선사이에 배치된 공간. 
-grid area : 평행한 grid line 네 줄로 둘러싸인 공간. 일반적으로 네 개의 grid line으로 둘러싸였고 그 안이 더 이상 쪼개지지 않는 한 칸을 grid cell 이라고도 부르는데, 이러한 grid cell이 한 개 일때 혹은 그 이상일 때의 해당 공간.
-grid gap : grid line의 두께.

grid도 flex box 처럼 grid container와 grid items로 구성되어 있음. 배치하고자 하는 요소인 item들은 container안에 담겨 있어야 함.

p.84 grid container: template(트랙 크기 지정)
display: grid --> display : block의 특성을 갖는 grid container를 정의.
display: inline-grid --> display : inline의 특성을 갖는 grid container를 정의.

grid-template-rows : 행에 해당하는 grid track의 크기를 정의. (ex. grid-template-rows : 40px 40px 40px;)
grid-template-columns : 열에 해당하는 grid track의 크기를 정의. (ex. grid-template-columns : 40px 80px 40px;)
	+반복되는 값을 쉽게 할당하려면 repeat() 함수 사용. (ex. grid-template-rows : repeat(10, 40px); --> 40px을 10번 작성하겠다.)
	++repeat() 함수는 grid-template-columns와 grid-template-rows에서만 사용가능.
	+++repeate() 함수 : [grid-template-columns: repeate(4, 40px 80px);  ==  grid-template-columns: 40px 80px 40px 80px 40px 80px 40px 80px;]
	fr : frction의 약자, 분수라는 뜻. grid track에서 fr은 grid container에 남은 공간의 비율을 나타내는 유연한 단위. (ex. grid container의 너비가 500px이라면 grid-template-columns : 1fr 3fr 1fr; 로 설정하면 1:3:1비율로 나누어 100px, 300px, 100px 차지.
grid-template-areas : grid area의 이름 할당. grid-area와 함께 활용하면 grid item들을 grid 레이아웃에 쉽게 할당 가능.
		grid-template-areas: " ... "; 로 이름 정의해주고 grid-area : ... ; 로 할당. 이 때 같은 이름을 가진 grid area끼리 합쳐져 레이아웃 적용.
		+직사각형의 모양이 유지되어야 레이아웃이 무너지지 않음.
		++공간을 비우고 싶다면 . 또는 none으로 이름 정의.
		+++grid-template-areas의 값은 grid 전체를 나타내야 함. 전체 grid area 수와 동일해야함.
grid-template : grid-template-xxx에 해당하는 모든 프로퍼티의 단축 프로퍼티.

p.85 grid container : gap(간격 지정)
grid-row-gap : 행 사이의 간격 지정
grid-column-gap : 열 사이의 간격 지정
grid gap : grid-row-gap, grid-column-gap 단축 프로퍼티. row column 순으로 값을 사용하고 값을 하나만 작성하면 row와 column 모두 동일한 값으로 지정.

p.86 grid container : auto
grid-auto-rows , grid-auto-columns : 크기가 지정되지 않은 grid track의 크기를 지정할 수 있는 프로퍼티.
minmax(최솟값, 최댓값) : 크기의 최대, 최소를 설정하는 함수. minmax(200px, auto); 로 하면 행의 크기는 최소 200px, 최대는 auto로 설정. (내용에 따라 자동으로 크기가 늘어남)
grid-auto-flow : grid가 자동으로 배치되는 방향을 결정. 기본 값은 row. (row, column, row dense, column dense를 가질 수 있음. row dense는 밀집된 형태로 정렬된다는 차이가 있음.)
	row dense : row와 같이 행을 넘기는 것은 맞지만, 먼저 다음줄로 넘어갈 요소들을 빈 칸으로 배치하여 먼저 채우는 방식으로 적용.

p.87 grid container : grid
grid : grid-template와 grid-auto의 단축형 프로퍼티. 세 가지 형태를 가짐.
	grid: <grid-template>;
	grid: <grid-template-rows> / auto-flow <grid-auto-columns>;
	grid: auto-flow <grid-auto-rows> / <grid-template-columns>;